{"version":3,"sources":["views/QRCodeView.js","views/ListCodesView.js","views/InfoQRCodesView.js","App.js","index.js"],"names":["sha1","require","statusQRCode","a","Promise","resolve","reject","bridge","subscribe","fn","e","detail","type","url","data","code_data","toString","send","unsubscribe","console","log","QRCodeView","isLoading","useAsync","promiseFn","activePanel","id","style","display","justifyContent","size","mode","width","height","alignItems","flexDirection","onClick","color","loadCodes","keys","key_codes","length","error","message","level","weight","marginTop","fontSize","marginBottom","marginLeft","map","entry","marginRight","className","overflowX","content","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","copyToClipboard","InfoQRCodesView","then","r","App","viewWidth","useAdaptivity","useState","activeView","setActiveView","setActivePanel","toggleContext","header","separator","spaced","ViewWidth","MOBILE","aside","transform","opened","onClose","before","data-mode","ListCodesView","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5b65c2ca.chunk.js","sourcesContent":["import React from \"react\";\nimport {Div, Button, Group, Panel, View, CardGrid, Card} from \"@vkontakte/vkui\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {useAsync} from \"react-async\";\n\nconst sha1 = require('js-sha256');\n\nfunction showFrameQR() {\n    console.log(\"Отправлен Show\");\n    bridge.send(\"VKWebAppOpenCodeReader\");\n}\n\n// function bridgeEvent(e) {\n//     if (e.detail.type === 'VKWebAppOpenCodeReaderResult') {\n//         let url = e.detail.data.code_data.toString();\n//         alert(\"QR код считан\")\n//         bridge.send(\"VKWebAppStorageSet\", {\"key\": sha1(url), \"value\": url});\n//     }\n//\n//     if (e.detail.type === 'VKWebAppStorageSetFailed') {\n//         console.log(e.detail.data);\n//     }\n// }\n\nasync function statusQRCode() {\n    return await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppOpenCodeReaderResult') {\n                let url = e.detail.data.code_data.toString();\n                bridge.send(\"VKWebAppStorageSet\", {\"key\": sha1(url), \"value\": url});\n                bridge.unsubscribe(fn);\n                resolve(url);\n            }\n\n            if (e.detail.type === 'VKWebAppStorageSetFailed') {\n                console.log(e.detail.data);\n            }\n        };\n\n        bridge.subscribe(fn);\n    });\n}\n\nfunction QRCodeView() {\n    const { isLoading } = useAsync({ promiseFn: statusQRCode });\n\n\n    return (\n        <View activePanel=\"main\" id=\"view1\">\n            <Panel id=\"main\">\n                <Group>\n                    <CardGrid style={{display: \"flex\", justifyContent: \"center\"}}>\n                        <Card size=\"l\" mode=\"shadow\" style={{width: \"100%\"}}>\n                            <div style={{ height: \"50vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", flexDirection: \"column\"}}>\n                                <Div onClick={() => showFrameQR()}>\n                                    <Button style={{height: \"70px\"}} mode=\"outline\" size=\"l\" >Сканировать QR код</Button>\n                                </Div>\n                                {!isLoading ? <p style={{color: \"green\"}}>QR код считан</p> : \"\"}\n                            </div>\n                        </Card>\n                    </CardGrid>\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default QRCodeView;","import React  from \"react\";\nimport {Group, Headline, Link, Panel, Title, View} from \"@vkontakte/vkui\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {useAsync} from 'react-async';\nimport {Icon32CheckCircle, Icon32Crop} from \"@vkontakte/icons\";\n\n\n\n\n\n\n\nasync function loadCodes() {\n    const key_codes = await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetKeysResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGetKeys\", {\"count\": 1000, \"offset\": 0});\n        bridge.subscribe(fn);\n    });\n    if (key_codes.length === 0) return [];\n\n    return await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGet\", {\"keys\": key_codes});\n        bridge.subscribe(fn);\n    });\n}\n\nconst copyToClipboard = (content) => {\n    const el = document.createElement('textarea');\n    el.value = content;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n};\n\nfunction QRCodeView() {\n\n    const { data, error, isLoading } = useAsync({ promiseFn: loadCodes });\n    if (isLoading) return \"Loading...\";\n    if (error) return `Error: ${error.message}`\n\n    return (\n        <View activePanel=\"main\" id=\"view2\">\n            <Panel id=\"main\">\n                <Title level=\"1\" weight=\"bold\" style={{marginTop: \"6px\", fontSize: \"26px\", marginBottom: \"12px\", marginLeft: \"6px\"}}>Сканированные QR коды</Title>\n\n                { data.length !== 0 ? data.map(entry => {\n                    return (\n                        <Group mode=\"card\" style={{marginBottom: \"-6px\"}}>\n                            <div style={{display: \"flex\", alignItems: \"center\"}}>\n                                <Icon32CheckCircle style={{marginRight: \"6px\"}}/>\n                                <div className=\"wrapper\">\n                                    <Title level=\"2\" weight=\"300\">QR code</Title>\n                                    <div style={{overflowX: \"scroll\"}}>\n                                        Данные: <span onClick={() => copyToClipboard(entry.value)} style={{color: \"#3F8AE0\"}}>{entry.value}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </Group>\n                    )\n                }) : \"У вас нет QR кодов.\"}\n\n            </Panel>\n        </View>\n    );\n}\n\nexport default QRCodeView;","import React from \"react\";\nimport {Group, Panel, Title, View} from \"@vkontakte/vkui\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {useAsync} from \"react-async\";\n\nasync function loadCodes() {\n    const key_codes = await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetKeysResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGetKeys\", {\"count\": 1000, \"offset\": 0});\n        bridge.subscribe(fn);\n    });\n    if (key_codes.length === 0) return [];\n\n    return await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGet\", {\"keys\": key_codes});\n        bridge.subscribe(fn);\n    });\n}\n\n\nfunction InfoQRCodesView() {\n    const { data, error, isLoading } = useAsync({ promiseFn: loadCodes });\n    if (isLoading) return \"Loading...\";\n    if (error) return `Error: ${error.message}`\n\n    return (\n        <View activePanel=\"main\" id=\"view3\">\n            <Panel id=\"main\">\n                <Group>\n                    <Title level=\"1\" weight=\"bold\" style={{marginTop: \"6px\", fontSize: \"26px\", marginBottom: \"12px\", marginLeft: \"6px\"}}>Количество QR кодов</Title>\n                    <p>\n                        <b style={{marginLeft: \"6px\"}}>{data.length}</b> шт.\n                    </p>\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default InfoQRCodesView;","import React, {useState} from 'react';\n\nimport './App.css';\nimport bridge from '@vkontakte/vk-bridge';\n\nimport QRCodeView from './views/QRCodeView'\nimport ListCodesView from './views/ListCodesView'\nimport InfoQRCodesView from './views/InfoQRCodesView'\n\nimport {\n    AdaptivityProvider,\n    ConfigProvider,\n    useAdaptivity,\n    AppRoot,\n    SplitLayout,\n    SplitCol,\n    ViewWidth,\n    PanelHeader, Root, PanelHeaderContent, PanelHeaderContext, Cell, List,\n} from \"@vkontakte/vkui\";\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport {\n    Icon16Dropdown,\n    Icon28ArticleOutline, Icon28CameraOutline, Icon28LikeOutline,\n} from \"@vkontakte/icons\";\n\nbridge.send(\"VKWebAppInit\", {}).then(r => console.log(\"Bridge:\" , r));\n\nfunction App() {\n    bridge.send(\"VKWebAppShowStoryBox\",\n        {\n            \"background_type\": \"image\",\n            \"url\": \"https://sun9-65.userapi.com/c850136/v850136098/1b77eb/0YK6suXkY24.jpg\",\n            \"stickers\": [\n                {\n                    \"sticker_type\": \"renderable\",\n                    \"sticker\": {\n                        \"can_delete\": 0,\n                        \"content_type\": \"image\",\n                        \"url\": \"https://upload.wikimedia.org/wikipedia/commons/c/c7/Dialog.png\",\n                        \"clickable_zones\": [\n                            {\n                                \"action_type\": \"link\",\n                                \"action\": {\n                                    \"link\": \"https://vk.com/wall-166562603_1192\",\n                                    \"tooltip_text_key\": \"tooltip_open_post\"\n                                },\n                                \"clickable_area\": [\n                                    {\n                                        \"x\": 17,\n                                        \"y\": 110\n                                    },\n                                    {\n                                        \"x\": 97,\n                                        \"y\": 110\n                                    },\n                                    {\n                                        \"x\": 97,\n                                        \"y\": 132\n                                    },\n                                    {\n                                        \"x\": 17,\n                                        \"y\": 132\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    );\n\n    const { viewWidth } = useAdaptivity();\n    const [activeView, setActiveView] = useState('view1');\n\n\n    const [activePanel, setActivePanel] = useState(false);\n\n    function toggleContext () {\n        setActivePanel(!activePanel);\n    }\n\n    return (\n\n        <ConfigProvider>\n            <AdaptivityProvider>\n                <AppRoot>\n                    <SplitLayout header={<PanelHeader separator={false} />}>\n                        <SplitCol spaced={viewWidth && viewWidth > ViewWidth.MOBILE}>\n\n                            <PanelHeader>\n                                <PanelHeaderContent\n                                    aside={<Icon16Dropdown style={{ transform: `rotate(${activePanel ? '180deg' : '0'})` }} />}\n                                    onClick={toggleContext}>\n                                    VK-QRCode\n                                </PanelHeaderContent>\n                            </PanelHeader>\n\n                            <PanelHeaderContext opened={activePanel} onClose={() => toggleContext}>\n                                <List>\n                                    <Cell\n                                        before={<Icon28CameraOutline />}\n                                        onClick={() => {setActiveView(\"view1\"); setActivePanel(false)}}\n                                        data-mode=\"all\"\n                                    >\n                                        Отсканировать QR код\n                                    </Cell>\n                                    <Cell\n                                        before={<Icon28LikeOutline />}\n                                        onClick={() => {setActiveView(\"view2\"); setActivePanel(false)}}\n                                        data-mode=\"all\"\n                                    >\n                                        Мои QR коды\n                                    </Cell>\n                                    <Cell\n                                        before={<Icon28ArticleOutline />}\n                                        onClick={() => {setActiveView(\"view3\"); setActivePanel(false)}}\n                                        data-mode=\"managed\"\n                                    >\n                                        Количество QR кодов\n                                    </Cell>\n                                </List>\n                            </PanelHeaderContext>\n\n                            <Root activeView={activeView}>\n                                <QRCodeView id=\"view1\"/>\n                                <ListCodesView id=\"view2\"/>\n                                <InfoQRCodesView id=\"view3\"/>\n                            </Root>\n                        </SplitCol>\n                    </SplitLayout>\n                </AppRoot>\n            </AdaptivityProvider>\n        </ConfigProvider>\n\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport bridge from '@vkontakte/vk-bridge';\n\nbridge.send(\"VKWebAppInit\", {}).then(r => console.log(\"Bridge:\" , r));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}