{"version":3,"sources":["views/QRCodeView.js","views/ListCodesView.js","views/InfoQRCodesView.js","App.js","index.js"],"names":["sha1","require","activeQRCode","React","createContext","bridge","subscribe","e","detail","type","url","data","code_data","toString","console","log","send","bridgeEvent","QRCodeView","activePanel","id","style","display","justifyContent","size","mode","width","height","alignItems","onClick","useContext","color","loadCodes","a","Promise","resolve","reject","fn","unsubscribe","keys","key_codes","length","useAsync","promiseFn","error","isLoading","message","map","entry","href","value","InfoQRCodesView","then","r","App","viewWidth","useAdaptivity","useState","activeView","setActiveView","setActivePanel","toggleContext","header","separator","spaced","ViewWidth","MOBILE","aside","transform","opened","onClose","before","data-mode","ListCodesView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.380a611c.chunk.js","sourcesContent":["import React from \"react\";\nimport {Div, Button, Group, Panel, View, CardGrid, Card} from \"@vkontakte/vkui\";\nimport bridge from \"@vkontakte/vk-bridge\";\n\nconst sha1 = require('js-sha256');\n\n\nlet activeQRCode = React.createContext(false);\n\nfunction showFrameQR() {\n    console.log(\"Отправлен Show\");\n    bridge.send(\"VKWebAppOpenCodeReader\");\n}\n\nfunction bridgeEvent(e) {\n    if (e.detail.type === 'VKWebAppOpenCodeReaderResult') {\n        let url = e.detail.data.code_data.toString();\n        console.log(\"URL получен: \" + url);\n        bridge.send(\"VKWebAppStorageSet\", {\"key\": sha1(url), \"value\": url});\n        activeQRCode = React.createContext(true);\n    }\n\n    if (e.detail.type === 'VKWebAppStorageSetFailed') {\n        console.log(e.detail.data);\n    }\n}\n\nbridge.subscribe((e) => bridgeEvent(e));\n\nfunction QRCodeView() {\n    return (\n        <View activePanel=\"main\" id=\"view1\">\n            <Panel id=\"main\">\n                <Group>\n                    <CardGrid style={{display: \"flex\", justifyContent: \"center\"}}>\n                        <Card size=\"l\" mode=\"shadow\" style={{width: \"100%\"}}>\n                            <div style={{ height: \"50vh\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                <Div onClick={() => showFrameQR()}>\n                                    <Button style={{height: \"70px\"}} mode=\"outline\" size=\"l\" >Сканировать QR код</Button>\n                                </Div>\n                            </div>\n                            {React.useContext(activeQRCode) ? <p style={{color: \"green\"}}>QR код загружен</p> : \"\"}\n                        </Card>\n                    </CardGrid>\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default QRCodeView;","import React  from \"react\";\nimport {Group, Panel, View} from \"@vkontakte/vkui\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport {useAsync} from 'react-async';\n\n\n\n\n\n\n\nasync function loadCodes() {\n    const key_codes = await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetKeysResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGetKeys\", {\"count\": 1000, \"offset\": 0});\n        bridge.subscribe(fn);\n    });\n    if (key_codes.length === 0) return [];\n\n    return await new Promise((resolve, reject) => {\n        const fn = e => {\n            if (e.detail.type === 'VKWebAppStorageGetResult') {\n                bridge.unsubscribe(fn);\n                resolve(e.detail.data.keys);\n            }\n        };\n\n        bridge.send(\"VKWebAppStorageGet\", {\"keys\": key_codes});\n        bridge.subscribe(fn);\n    });\n}\n\n\nfunction QRCodeView() {\n\n    const { data, error, isLoading } = useAsync({ promiseFn: loadCodes });\n    if (isLoading) return \"Loading...\";\n    if (error) return `Error: ${error.message}`\n\n    console.log(data);\n    return (\n        <View activePanel=\"main\" id=\"view2\">\n            <Panel id=\"main\">\n                <Group>\n                    <h1>Hello</h1>\n                    {\n                        data.map(entry => {\n                            return (\n                             <div>\n                                 <a href={\"'\" + entry.value + \"'\"}>QR code: {entry.value}</a>\n                            </div>)\n                        })\n                    }\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default QRCodeView;","import React from \"react\";\nimport {Group, Panel, View} from \"@vkontakte/vkui\";\n\n\nfunction InfoQRCodesView() {\n    return (\n        <View activePanel=\"main\" id=\"view3\">\n            <Panel id=\"main\">\n                <Group>\n                    <h1>Количество QR кодов</h1>\n                    <p>123 шт.</p>\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default InfoQRCodesView;","import React, {useState} from 'react';\n\nimport './App.css';\nimport bridge from '@vkontakte/vk-bridge';\n\nimport QRCodeView from './views/QRCodeView'\nimport ListCodesView from './views/ListCodesView'\nimport InfoQRCodesView from './views/InfoQRCodesView'\n\nimport {\n    AdaptivityProvider,\n    ConfigProvider,\n    useAdaptivity,\n    AppRoot,\n    SplitLayout,\n    SplitCol,\n    ViewWidth,\n    PanelHeader, Root, PanelHeaderContent, PanelHeaderContext, Cell, List,\n} from \"@vkontakte/vkui\";\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport {\n    Icon16Dropdown,\n    Icon28ArticleOutline, Icon28CameraOutline, Icon28LikeOutline,\n} from \"@vkontakte/icons\";\n\nbridge.send(\"VKWebAppInit\", {}).then(r => console.log(\"Bridge:\" , r));\n\nfunction App() {\n    const { viewWidth } = useAdaptivity();\n    const [activeView, setActiveView] = useState('view1');\n\n\n    const [activePanel, setActivePanel] = useState(false);\n\n    function toggleContext () {\n        setActivePanel(!activePanel);\n    }\n\n    return (\n\n        <ConfigProvider>\n            <AdaptivityProvider>\n                <AppRoot>\n                    <SplitLayout header={<PanelHeader separator={false} />}>\n                        <SplitCol spaced={viewWidth && viewWidth > ViewWidth.MOBILE}>\n\n                            <PanelHeader>\n                                <PanelHeaderContent\n                                    aside={<Icon16Dropdown style={{ transform: `rotate(${activePanel ? '180deg' : '0'})` }} />}\n                                    onClick={toggleContext}>\n                                    VK-QRCode\n                                </PanelHeaderContent>\n                            </PanelHeader>\n\n                            <PanelHeaderContext opened={activePanel} onClose={() => toggleContext}>\n                                <List>\n                                    <Cell\n                                        before={<Icon28CameraOutline />}\n                                        onClick={() => {setActiveView(\"view1\"); setActivePanel(false)}}\n                                        data-mode=\"all\"\n                                    >\n                                        Отсканировать QR код\n                                    </Cell>\n                                    <Cell\n                                        before={<Icon28LikeOutline />}\n                                        onClick={() => {setActiveView(\"view2\"); setActivePanel(false)}}\n                                        data-mode=\"all\"\n                                    >\n                                        Мои QR коды\n                                    </Cell>\n                                    <Cell\n                                        before={<Icon28ArticleOutline />}\n                                        onClick={() => {setActiveView(\"view3\"); setActivePanel(false)}}\n                                        data-mode=\"managed\"\n                                    >\n                                        Количество QR кодов\n                                    </Cell>\n                                </List>\n                            </PanelHeaderContext>\n\n                            <Root activeView={activeView}>\n                                <QRCodeView id=\"view1\"/>\n                                <ListCodesView id=\"view2\"/>\n                                <InfoQRCodesView id=\"view3\"/>\n                            </Root>\n                        </SplitCol>\n                    </SplitLayout>\n                </AppRoot>\n            </AdaptivityProvider>\n        </ConfigProvider>\n\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport \"@vkontakte/vkui/dist/vkui.css\";\nimport bridge from '@vkontakte/vk-bridge';\n\nbridge.send(\"VKWebAppInit\", {}).then(r => console.log(\"Bridge:\" , r));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}